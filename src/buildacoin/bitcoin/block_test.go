package bitcoin

import (
    "bytes"
    "encoding/hex"
    "testing"
    "time"
)

func TestHeaderSerial(t *testing.T) {
    prevBlockHash, err := HashFromHex("279f6330ccbbb9103b9e3a5350765052081d" +
            "dbae898f1ef6b8c64f3bcef715f6")
    if err != nil {
        t.Fatal(err.Error())
    }
    timestamp, err := time.Parse(time.UnixDate, "Thu Nov 10 00:15:52 UTC 2011")
    if err != nil {
        t.Fatal(err.Error())
    }
    block := &Block {
        version: 1,
        prevBlock: prevBlockHash,
        timestamp: timestamp,
        targetBits: 0x1d018ea7,
        nonce: 3562614017,
        txs: []*Tx {
            new(Tx,
                ).Input(Hash{}, 4294967295, []byte{ 0x04, 0xb2, 0x17, 0xbb,
                        0x4e, 0x02, 0x23, 0x09, },
                ).Output(50 * Coin, []byte{ 0x41, 0x04, 0x48, 0x70, 0x34, 0x18,
                        0x73, 0xac, 0xca, 0xb7, 0x60, 0x0d, 0x65, 0xe2, 0x04,
                        0xbb, 0x4a, 0xe4, 0x7c, 0x43, 0xd2, 0x0c, 0x56, 0x2e,
                        0xbf, 0xbf, 0x70, 0xcb, 0xcb, 0x18, 0x8d, 0xa9, 0x8d,
                        0xec, 0x8b, 0x5c, 0xcf, 0x05, 0x26, 0xc8, 0xe4, 0xd9,
                        0x54, 0xc6, 0xb4, 0x7b, 0x89, 0x8c, 0xc3, 0x0a, 0xdf,
                        0x1f, 0xf7, 0x7c, 0x2e, 0x51, 0x8d, 0xdc, 0x97, 0x85,
                        0xb8, 0x7c, 0xcb, 0x90, 0xb8, 0xcd, 0xac, }),
        },
    }

    expected := []byte{ 0x01, 0x00, 0x00, 0x00, 0xf6, 0x15, 0xf7, 0xce, 0x3b,
            0x4f, 0xc6, 0xb8, 0xf6, 0x1e, 0x8f, 0x89, 0xae, 0xdb, 0x1d, 0x08,
            0x52, 0x50, 0x76, 0x50, 0x53, 0x3a, 0x9e, 0x3b, 0x10, 0xb9, 0xbb,
            0xcc, 0x30, 0x63, 0x9f, 0x27, 0x9f, 0xca, 0xa8, 0x67, 0x46, 0xe1,
            0xef, 0x52, 0xd3, 0xed, 0xb3, 0xc4, 0xad, 0x82, 0x59, 0x92, 0x0d,
            0x50, 0x9b, 0xd0, 0x73, 0x60, 0x5c, 0x9b, 0xf1, 0xd5, 0x99, 0x83,
            0x75, 0x2a, 0x6b, 0x06, 0xb8, 0x17, 0xbb, 0x4e, 0xa7, 0x8e, 0x01,
            0x1d, 0x01, 0x2d, 0x59, 0xd4, }
    actual := block.Header()

    if !bytes.Equal(expected, actual) {
        t.Fatal("header mismatch:\nexpected:\n" + hex.EncodeToString(expected) +
            "\nactual:\n" + hex.EncodeToString(actual))
    }
}
